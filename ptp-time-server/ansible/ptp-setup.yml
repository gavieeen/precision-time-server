---
- name: Setup Raspberry Pi CM4 for High-Precision PPS + Chrony
  hosts: ptp_pi
  become: true
  vars:
    chronyd_cpu: 2

  tasks:
    - name: Install required packages
      apt:
        name:
          - chrony
          - gpsd
          - gpsd-clients
          - pps-tools
          - linux-modules-extra-raspi
        state: present
        update_cache: true

    - name: Enable PPS via GPIO18 in config.txt
      lineinfile:
        path: /boot/firmware/config.txt
        line: "dtoverlay=pps-gpio,gpiopin=18"
        insertafter: EOF

    - name: Ensure CPU isolation in cmdline.txt
      replace:
        path: /boot/firmware/cmdline.txt
        regexp: '(rootwait\\s*fixrtc)(?!.*isolcpus)'
        replace: '\\1 isolcpus=2 nohz_full=2 rcu_nocbs=2'

    - name: Add /dev/pps0 to gpsd default config
      lineinfile:
        path: /etc/default/gpsd
        regexp: '^DEVICES='
        line: 'DEVICES="/dev/ttyACM0 /dev/pps0"'
        create: yes

    - name: Stop chrony service before applying override
      systemd:
        name: chrony
        state: stopped

    - name: Create systemd override directory for chrony
      file:
        path: /etc/systemd/system/chrony.service.d
        state: directory
        mode: '0755'

    - name: Create systemd override to pin chronyd to CPU {{ chronyd_cpu }}
      copy:
        dest: /etc/systemd/system/chrony.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/taskset -c {{ chronyd_cpu }} /usr/sbin/chronyd -F 1

    - name: Reload systemd configuration
      command: systemctl daemon-reexec

    - name: Reload systemd unit files
      systemd:
        daemon_reload: true

    - name: Enable and restart chrony
      systemd:
        name: chrony
        enabled: true
        state: restarted

    - name: Verify chronyd is running on the correct CPU
      shell: "ps -eo pid,cmd,psr | grep chronyd"
      register: chrony_affinity
      changed_when: false

    - name: Show chronyd CPU affinity
      debug:
        var: chrony_affinity.stdout

    - name: Ensure gpsd is running for logging
      systemd:
        name: gpsd.socket
        enabled: true
        state: started

    - name: Create GPS logging directory
      file:
        path: /var/log/gps
        state: directory
        mode: '0755'

    - name: Create gpspipe logging script
      copy:
        dest: /usr/local/bin/log_gps.sh
        mode: '0755'
        content: |
          #!/bin/bash
          gpspipe -w >> /var/log/gps/gps_log_$(date +%F).json

    - name: Create systemd service to run gpspipe logger
      copy:
        dest: /etc/systemd/system/gps-logger.service
        content: |
          [Unit]
          Description=Log GPS data with gpspipe
          After=gpsd.service

          [Service]
          ExecStart=/usr/local/bin/log_gps.sh
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Enable gps-logger service
      systemd:
        name: gps-logger.service
        enabled: true
        state: started
    - name: Ensure rsync is installed for GPS log transfer
      apt:
        name: rsync
        state: present
        update_cache: false

    - name: (Reminder) Show command to download GPS logs via rsync
      debug:
        msg: >
          To download GPS logs to your local machine, run:
          rsync -avz pi@<raspberry_pi_ip>:/var/log/gps/ ./gps-logs/

